{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Example - Exploratory tests with Bernoulli NB models",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/RandomForestRanger/PhD/blob/master/006_Messaround_with_Bernoulli_NB_models.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VxZbaaBpuPBJ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Pip installation\n",
        "!pip install --upgrade -q gspread\n",
        "!pip install gspread-dataframe\n",
        "!pip install -U scikit-learn>=0.20\n",
        "!pip install --upgrade scikit-learn"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bZ2d47wYuSyi",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#import libraries\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import gspread\n",
        "from gspread_dataframe import get_as_dataframe, set_with_dataframe\n",
        "from sklearn.naive_bayes import ComplementNB\n",
        "\n",
        "import sklearn.model_selection as ms\n",
        "import sklearn.metrics as sklm\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.model_selection import RepeatedKFold\n",
        "from sklearn import datasets, linear_model\n",
        "from sklearn.model_selection import cross_validate\n",
        "from sklearn.preprocessing import MultiLabelBinarizer # This one to later turn my LabelsNP into a onehot encoded 2d array\n",
        "\n",
        "from sklearn import preprocessing\n",
        "from sklearn.naive_bayes import BernoulliNB  # this will be operative today...\n",
        "from sklearn.linear_model import LogisticRegression #Mb Added, not sure it should be here... \n",
        "import sklearn.model_selection as ms\n",
        "import sklearn.metrics as sklm\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy.random as nr\n",
        "\n",
        "%matplotlib inline"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qlYpC94KATUC",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#authorise node to access Gdrive via KDL\n",
        "from google.colab import auth\n",
        "auth.authenticate_user()\n",
        "from oauth2client.client import GoogleCredentials\n",
        "gc = gspread.authorize(GoogleCredentials.get_application_default())"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yXoBAQ8DATY9",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# now containing \"6 short munged and num only 30 Oct IRIS dataset\"\n",
        "\n",
        "#link to pre-opened csv file in my gdrive \n",
        "data1 = gc.open_by_url('https://docs.google.com/spreadsheets/d/1Q2YwmFiFSOkW_V9cRYgZ4GdGGl63_N6mOejEJQB1e0M/edit#gid=835063997')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7zCHDcbrATc0",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#get the data as a worksheet  \n",
        "ws = data1.worksheet('icanhasdata')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TssdyM_uBPR8",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#convert the data to pandas dataframe (can include argument , header = None   if this is needed)\n",
        "FullDF = get_as_dataframe(ws)\n",
        "#inspect data\n",
        "FullDF.tail()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zUrvWt62BPho",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#since g-sheets brings along a lot of empty/Nan cellumns or rows, this chops them out. Can replace \"all\" with \"any\" if I want to discard any incomplete collumns or rows\n",
        "\n",
        "# I changed the \"all\" to \"any\", to root out all cases of NaN...\n",
        "\n",
        "FullDF.dropna(axis=1, how='all' ,inplace=True )\n",
        "FullDF.dropna(axis=0, how='any', thresh=None, subset=None, inplace=True)\n",
        "FullDF.tail()\n",
        "\n",
        "# if there are still \"NaN\" values, I want to fill them with \"0\". Go about this thusly:\n",
        "\n",
        "FullDF.fillna(0)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dD_HtbuNElhr",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "print(FullDF.shape)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oZdlBbAmrc5G",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "FeatDF  = FullDF.drop( columns = \"PDV\")\n",
        "LabelDF = FullDF[\"PDV\"]\n",
        "print(FeatDF.shape)\n",
        "print(LabelDF.shape)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cXBKmQQ0xm9_",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Convent the DF to a NP array\n",
        "\n",
        "FeatNP  = FeatDF.values\n",
        "LabelNP = LabelDF.values\n",
        "print(\"Feat:\")\n",
        "print(FeatNP.shape)\n",
        "print(FeatNP)\n",
        "print(\"Label:\")\n",
        "print(LabelNP.shape)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2NbePQQMx0Qa",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "print(FeatNP[0:1,0:])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rwwzC4q2a6sl",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## Randomly sample cases to create independent training and test data\n",
        "nr.seed(1)\n",
        "indx = range(FeatNP.shape[0])\n",
        "indx = ms.train_test_split(indx, test_size = 100)\n",
        "X_train = FeatNP[indx[0],:]\n",
        "y_train = np.ravel(LabelNP[indx[0]])\n",
        "X_test = FeatNP[indx[1],:]\n",
        "y_test = np.ravel(LabelNP[indx[1]])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fiPh1-iUK86M",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "print(\"X train shape is: \", X_train.shape, \"\\n\")\n",
        "print(\"X test shape is: \", y_test.shape, \"\\n\")\n",
        "print(\"Y train shape is: \", y_train.shape, \"\\n\")\n",
        "print(\"Y test shape is: \", y_test.shape, \"\\n\")\n",
        "print(\"Unscaled X train record number 700 looks like this: \\n\", X_train[700:701,:])\n",
        "print(np.isnan(X_train.any()))\n",
        "print(np.isfinite(X_train.any()))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yFx2MVQWa6ss",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## ONLY scale if I'm going to Gaussian...\n",
        "#scale = preprocessing.StandardScaler()\n",
        "#scale.fit(X_train)\n",
        "#X_train = scale.transform(X_train)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PN9qyMBK0vsg",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#print(\"Scaled X train record number 700 looks like this: \\n\", X_train[700:701,:])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": true,
        "id": "f0i9-5X4a6sz",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "4befe6f3-3158-49ae-f654-40db11ebb635"
      },
      "source": [
        "NB_mod = BernoulliNB()\n",
        "\n",
        "##from sklearn.naive_bayes import MultinomialNB\n",
        "##NB_mod = MultinomialNB()\n",
        "##MultinomialNB(alpha=1.0, class_prior=None, fit_prior=True)\n",
        "###NB_mod = ComplementNB()\n",
        "\n",
        "NB_mod.fit(X_train, y_train)\n",
        "BernoulliNB(alpha=1.0, class_prior=None, fit_prior=True, )"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "BernoulliNB(alpha=1.0, binarize=0.0, class_prior=None, fit_prior=True)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QZ9mo0SYa6s5",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#   X_test = scale.transform(X_test)\n",
        "scores = NB_mod.predict(X_test)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kg43GlGkvmH0",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## What, this worked ?!!   ##\n",
        "# MB trying to figure out how to see the coefficients/parameters...\n",
        "print(NB_mod.coef_)\n",
        " "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bcCGzKEUflsG",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 170
        },
        "outputId": "e61b19eb-3079-485b-cd06-487f805d811e"
      },
      "source": [
        "y_test"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['V', 'NP', 'V', 'P', 'NP', 'P', 'D', 'D', 'D', 'V', 'P', 'NP', 'P',\n",
              "       'P', 'P', 'P', 'NP', 'D', 'P', 'NP', 'D', 'P', 'NP', 'NP', 'V',\n",
              "       'P', 'NP', 'D', 'P', 'NP', 'P', 'NP', 'NP', 'NP', 'NP', 'P', 'P',\n",
              "       'P', 'NP', 'NP', 'NP', 'NP', 'V', 'NP', 'NP', 'P', 'P', 'NP', 'NP',\n",
              "       'D', 'P', 'NP', 'NP', 'P', 'NP', 'D', 'NP', 'D', 'NP', 'NP', 'P',\n",
              "       'NP', 'NP', 'P', 'V', 'NP', 'P', 'NP', 'P', 'NP', 'P', 'D', 'P',\n",
              "       'P', 'NP', 'V', 'NP', 'NP', 'D', 'NP', 'D', 'P', 'V', 'NP', 'NP',\n",
              "       'P', 'P', 'P', 'P', 'P', 'NP', 'P', 'NP', 'P', 'NP', 'P', 'NP',\n",
              "       'NP', 'NP', 'D'], dtype=object)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BaRO30EseUe2",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 170
        },
        "outputId": "f62a33fd-9eb1-41fc-c2d9-25f9870f3626"
      },
      "source": [
        "scores"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['D', 'NP', 'P', 'P', 'NP', 'NP', 'D', 'NP', 'P', 'V', 'NP', 'NP',\n",
              "       'NP', 'P', 'P', 'NP', 'NP', 'NP', 'P', 'P', 'V', 'P', 'NP', 'NP',\n",
              "       'P', 'P', 'P', 'NP', 'P', 'NP', 'P', 'P', 'NP', 'NP', 'NP', 'P',\n",
              "       'NP', 'P', 'NP', 'NP', 'NP', 'NP', 'V', 'NP', 'NP', 'P', 'NP',\n",
              "       'NP', 'NP', 'D', 'P', 'NP', 'NP', 'P', 'NP', 'P', 'NP', 'P', 'NP',\n",
              "       'NP', 'D', 'V', 'NP', 'P', 'D', 'NP', 'D', 'P', 'P', 'NP', 'V',\n",
              "       'NP', 'P', 'NP', 'P', 'V', 'NP', 'NP', 'V', 'NP', 'D', 'P', 'V',\n",
              "       'NP', 'D', 'P', 'NP', 'NP', 'P', 'P', 'NP', 'P', 'NP', 'NP', 'V',\n",
              "       'P', 'P', 'NP', 'NP', 'P'], dtype='<U2')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": true,
        "id": "ouXOjAqVa6s_",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 255
        },
        "outputId": "2c645c6a-fca5-4129-caf9-1c19f48c23fb"
      },
      "source": [
        "def print_metrics_4(labels, scores):\n",
        "   \n",
        "    conf = sklm.confusion_matrix(labels, scores)\n",
        "    print('                 Confusion matrix')\n",
        "    print('                 Score NP         Score P          Score D          Score V')\n",
        "    print('Actual NP      %6d' % conf[0,0] + '            %5d' % conf[0,1] + '             %5d' % conf[0,2]+ '             %5d' % conf[0,3])\n",
        "    print('Actual P       %6d' % conf[1,0] + '            %5d' % conf[1,1] + '             %5d' % conf[1,2]+ '             %5d' % conf[1,3])\n",
        "    print('Actual D       %6d' % conf[2,0] + '            %5d' % conf[2,1] + '             %5d' % conf[2,2]+ '             %5d' % conf[2,3])\n",
        "    print('Actual V       %6d' % conf[3,0] + '            %5d' % conf[3,1] + '             %5d' % conf[3,2]+ '             %5d' % conf[3,3])\n",
        "    ## Now compute and display the accuracy and metrics\n",
        "    print('')\n",
        "    print('Accuracy        %0.2f' % sklm.accuracy_score(labels, scores))\n",
        "    metrics = sklm.precision_recall_fscore_support(labels, scores)\n",
        "    print(' ')\n",
        "    print('            NP        P          D          V')\n",
        "    print('Num case    %0.2f' % metrics[3][0] + '     %0.2f' % metrics[3][1] + '      %0.2f' % metrics[3][2]+ '      %0.2f' % metrics[3][3])\n",
        "    print('Precision   %0.2f' % metrics[0][0] + '      %0.2f' % metrics[0][1] + '       %0.2f' % metrics[0][2]+ '       %0.2f' % metrics[0][3])\n",
        "    print('Recall      %0.2f' % metrics[1][0] + '      %0.2f' % metrics[1][1] + '       %0.2f' % metrics[1][2]+ '       %0.2f' % metrics[1][3])\n",
        "    print('F1          %0.2f' % metrics[2][0] + '      %0.2f' % metrics[2][1] + '       %0.2f' % metrics[2][2]+ '       %0.2f' % metrics[2][3])\n",
        "    \n",
        "print_metrics_4(y_test, scores) \n",
        "\n",
        "# with 110 variables, GaussianNB   accuracy is 0.12\n",
        "# with 89 variables,  GaussianNB   accuracy is 0.20 \n",
        "# with 89 variables,  ComplementNB accuracy is 0.33\n",
        "# with 49 variables,  ComplementNB accuracy is 0.55\n",
        "# when i cut out the Unique ID, accuracy moved up to 0.58\n",
        "# Using Bernoulli, I move this up to 0.64 ...(should I cross-validate?)  ...should I run this more than once?"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "                 Confusion matrix\n",
            "                 Score NP         Score P          Score D          Score V\n",
            "Actual NP           3                4                 4                 2\n",
            "Actual P            1               35                 6                 2\n",
            "Actual D            2               10                22                 1\n",
            "Actual V            2                0                 2                 4\n",
            "\n",
            "Accuracy        0.64\n",
            " \n",
            "            NP        P          D          V\n",
            "Num case    13.00     44.00      35.00      8.00\n",
            "Precision   0.38      0.71       0.65       0.44\n",
            "Recall      0.23      0.80       0.63       0.50\n",
            "F1          0.29      0.75       0.64       0.47\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4XMeDelgWabV",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}
